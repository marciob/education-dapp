// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ChallengeAdded extends ethereum.Event {
  get params(): ChallengeAdded__Params {
    return new ChallengeAdded__Params(this);
  }
}

export class ChallengeAdded__Params {
  _event: ChallengeAdded;

  constructor(event: ChallengeAdded) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get courseId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get challengeReward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[3].value.toString();
  }

  get question(): string {
    return this._event.parameters[4].value.toString();
  }

  get uri(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get courseId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get studentAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get reward(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CourseAdded extends ethereum.Event {
  get params(): CourseAdded__Params {
    return new CourseAdded__Params(this);
  }
}

export class CourseAdded__Params {
  _event: CourseAdded;

  constructor(event: CourseAdded) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get courseOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get totalStaked(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get stakedTokenAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get courseId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class StudentAdded extends ethereum.Event {
  get params(): StudentAdded__Params {
    return new StudentAdded__Params(this);
  }
}

export class StudentAdded__Params {
  _event: StudentAdded;

  constructor(event: StudentAdded) {
    this._event = event;
  }

  get courseId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get studentAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SubmittedChallenge extends ethereum.Event {
  get params(): SubmittedChallenge__Params {
    return new SubmittedChallenge__Params(this);
  }
}

export class SubmittedChallenge__Params {
  _event: SubmittedChallenge;

  constructor(event: SubmittedChallenge) {
    this._event = event;
  }

  get courseId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get challengeId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get answer(): string {
    return this._event.parameters[2].value.toString();
  }

  get studentAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class ValidatedSubmit extends ethereum.Event {
  get params(): ValidatedSubmit__Params {
    return new ValidatedSubmit__Params(this);
  }
}

export class ValidatedSubmit__Params {
  _event: ValidatedSubmit;

  constructor(event: ValidatedSubmit) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get courseId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get score(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rewardAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get studentAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Totem__allCoursesResult {
  value0: string;
  value1: boolean;
  value2: Address;
  value3: BigInt;
  value4: Address;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: string,
    value1: boolean,
    value2: Address,
    value3: BigInt,
    value4: Address,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getIsActive(): boolean {
    return this.value1;
  }

  getCourseOwner(): Address {
    return this.value2;
  }

  getTotalStaked(): BigInt {
    return this.value3;
  }

  getStakedTokenAddress(): Address {
    return this.value4;
  }

  getStudentId(): BigInt {
    return this.value5;
  }

  getCourseId(): BigInt {
    return this.value6;
  }
}

export class Totem__coursesResult {
  value0: string;
  value1: boolean;
  value2: Address;
  value3: BigInt;
  value4: Address;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: string,
    value1: boolean,
    value2: Address,
    value3: BigInt,
    value4: Address,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getIsActive(): boolean {
    return this.value1;
  }

  getCourseOwner(): Address {
    return this.value2;
  }

  getTotalStaked(): BigInt {
    return this.value3;
  }

  getStakedTokenAddress(): Address {
    return this.value4;
  }

  getStudentId(): BigInt {
    return this.value5;
  }

  getCourseId(): BigInt {
    return this.value6;
  }
}

export class Totem extends ethereum.SmartContract {
  static bind(address: Address): Totem {
    return new Totem("Totem", address);
  }

  accountBalances(param0: Address, param1: Bytes): BigInt {
    let result = super.call(
      "accountBalances",
      "accountBalances(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_accountBalances(
    param0: Address,
    param1: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accountBalances",
      "accountBalances(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allCourses(param0: BigInt): Totem__allCoursesResult {
    let result = super.call(
      "allCourses",
      "allCourses(uint256):(string,bool,address,uint256,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Totem__allCoursesResult(
      result[0].toString(),
      result[1].toBoolean(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_allCourses(param0: BigInt): ethereum.CallResult<Totem__allCoursesResult> {
    let result = super.tryCall(
      "allCourses",
      "allCourses(uint256):(string,bool,address,uint256,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Totem__allCoursesResult(
        value[0].toString(),
        value[1].toBoolean(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  challengeCount(param0: BigInt): BigInt {
    let result = super.call(
      "challengeCount",
      "challengeCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_challengeCount(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "challengeCount",
      "challengeCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  challengeCounter(): BigInt {
    let result = super.call(
      "challengeCounter",
      "challengeCounter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_challengeCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "challengeCounter",
      "challengeCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  courses(param0: BigInt): Totem__coursesResult {
    let result = super.call(
      "courses",
      "courses(uint256):(string,bool,address,uint256,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Totem__coursesResult(
      result[0].toString(),
      result[1].toBoolean(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_courses(param0: BigInt): ethereum.CallResult<Totem__coursesResult> {
    let result = super.tryCall(
      "courses",
      "courses(uint256):(string,bool,address,uint256,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Totem__coursesResult(
        value[0].toString(),
        value[1].toBoolean(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  getChallengeReward(courseId: BigInt, challengeId: BigInt): BigInt {
    let result = super.call(
      "getChallengeReward",
      "getChallengeReward(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(courseId),
        ethereum.Value.fromUnsignedBigInt(challengeId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getChallengeReward(
    courseId: BigInt,
    challengeId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getChallengeReward",
      "getChallengeReward(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(courseId),
        ethereum.Value.fromUnsignedBigInt(challengeId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStudentReward(
    courseId: BigInt,
    challengeId: BigInt,
    studentAddress: Address
  ): BigInt {
    let result = super.call(
      "getStudentReward",
      "getStudentReward(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(courseId),
        ethereum.Value.fromUnsignedBigInt(challengeId),
        ethereum.Value.fromAddress(studentAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_getStudentReward(
    courseId: BigInt,
    challengeId: BigInt,
    studentAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStudentReward",
      "getStudentReward(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(courseId),
        ethereum.Value.fromUnsignedBigInt(challengeId),
        ethereum.Value.fromAddress(studentAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  status(): i32 {
    let result = super.call("status", "status():(uint8)", []);

    return result[0].toI32();
  }

  try_status(): ethereum.CallResult<i32> {
    let result = super.tryCall("status", "status():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  whitelistedTokens(param0: Bytes): Address {
    let result = super.call(
      "whitelistedTokens",
      "whitelistedTokens(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toAddress();
  }

  try_whitelistedTokens(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "whitelistedTokens",
      "whitelistedTokens(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get challengeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get courseId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class AddChallengeCall extends ethereum.Call {
  get inputs(): AddChallengeCall__Inputs {
    return new AddChallengeCall__Inputs(this);
  }

  get outputs(): AddChallengeCall__Outputs {
    return new AddChallengeCall__Outputs(this);
  }
}

export class AddChallengeCall__Inputs {
  _call: AddChallengeCall;

  constructor(call: AddChallengeCall) {
    this._call = call;
  }

  get courseId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get challengeReward(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get question(): string {
    return this._call.inputValues[3].value.toString();
  }

  get uri(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class AddChallengeCall__Outputs {
  _call: AddChallengeCall;

  constructor(call: AddChallengeCall) {
    this._call = call;
  }
}

export class AddCourseCall extends ethereum.Call {
  get inputs(): AddCourseCall__Inputs {
    return new AddCourseCall__Inputs(this);
  }

  get outputs(): AddCourseCall__Outputs {
    return new AddCourseCall__Outputs(this);
  }
}

export class AddCourseCall__Inputs {
  _call: AddCourseCall;

  constructor(call: AddCourseCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get ownerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get stakeAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class AddCourseCall__Outputs {
  _call: AddCourseCall;

  constructor(call: AddCourseCall) {
    this._call = call;
  }
}

export class AddStudentsCall extends ethereum.Call {
  get inputs(): AddStudentsCall__Inputs {
    return new AddStudentsCall__Inputs(this);
  }

  get outputs(): AddStudentsCall__Outputs {
    return new AddStudentsCall__Outputs(this);
  }
}

export class AddStudentsCall__Inputs {
  _call: AddStudentsCall;

  constructor(call: AddStudentsCall) {
    this._call = call;
  }

  get studentAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get courseId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddStudentsCall__Outputs {
  _call: AddStudentsCall;

  constructor(call: AddStudentsCall) {
    this._call = call;
  }
}

export class DepositTokensCall extends ethereum.Call {
  get inputs(): DepositTokensCall__Inputs {
    return new DepositTokensCall__Inputs(this);
  }

  get outputs(): DepositTokensCall__Outputs {
    return new DepositTokensCall__Outputs(this);
  }
}

export class DepositTokensCall__Inputs {
  _call: DepositTokensCall;

  constructor(call: DepositTokensCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get symbol(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class DepositTokensCall__Outputs {
  _call: DepositTokensCall;

  constructor(call: DepositTokensCall) {
    this._call = call;
  }
}

export class SubmitChallengeCall extends ethereum.Call {
  get inputs(): SubmitChallengeCall__Inputs {
    return new SubmitChallengeCall__Inputs(this);
  }

  get outputs(): SubmitChallengeCall__Outputs {
    return new SubmitChallengeCall__Outputs(this);
  }
}

export class SubmitChallengeCall__Inputs {
  _call: SubmitChallengeCall;

  constructor(call: SubmitChallengeCall) {
    this._call = call;
  }

  get answer(): string {
    return this._call.inputValues[0].value.toString();
  }

  get courseId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get challengeId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SubmitChallengeCall__Outputs {
  _call: SubmitChallengeCall;

  constructor(call: SubmitChallengeCall) {
    this._call = call;
  }
}

export class ValidateSubmitCall extends ethereum.Call {
  get inputs(): ValidateSubmitCall__Inputs {
    return new ValidateSubmitCall__Inputs(this);
  }

  get outputs(): ValidateSubmitCall__Outputs {
    return new ValidateSubmitCall__Outputs(this);
  }
}

export class ValidateSubmitCall__Inputs {
  _call: ValidateSubmitCall;

  constructor(call: ValidateSubmitCall) {
    this._call = call;
  }

  get challengeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get courseId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get score(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get studentAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ValidateSubmitCall__Outputs {
  _call: ValidateSubmitCall;

  constructor(call: ValidateSubmitCall) {
    this._call = call;
  }
}

export class WhitelistTokensCall extends ethereum.Call {
  get inputs(): WhitelistTokensCall__Inputs {
    return new WhitelistTokensCall__Inputs(this);
  }

  get outputs(): WhitelistTokensCall__Outputs {
    return new WhitelistTokensCall__Outputs(this);
  }
}

export class WhitelistTokensCall__Inputs {
  _call: WhitelistTokensCall;

  constructor(call: WhitelistTokensCall) {
    this._call = call;
  }

  get symbol(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WhitelistTokensCall__Outputs {
  _call: WhitelistTokensCall;

  constructor(call: WhitelistTokensCall) {
    this._call = call;
  }
}

export class WithdrawTokensCall extends ethereum.Call {
  get inputs(): WithdrawTokensCall__Inputs {
    return new WithdrawTokensCall__Inputs(this);
  }

  get outputs(): WithdrawTokensCall__Outputs {
    return new WithdrawTokensCall__Outputs(this);
  }
}

export class WithdrawTokensCall__Inputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get symbol(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class WithdrawTokensCall__Outputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }
}

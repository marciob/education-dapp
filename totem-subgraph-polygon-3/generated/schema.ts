// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ChallengeAdded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ChallengeAdded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ChallengeAdded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ChallengeAdded", id.toString(), this);
    }
  }

  static load(id: string): ChallengeAdded | null {
    return changetype<ChallengeAdded | null>(store.get("ChallengeAdded", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get challengeId(): BigInt {
    let value = this.get("challengeId");
    return value!.toBigInt();
  }

  set challengeId(value: BigInt) {
    this.set("challengeId", Value.fromBigInt(value));
  }

  get courseId(): BigInt {
    let value = this.get("courseId");
    return value!.toBigInt();
  }

  set courseId(value: BigInt) {
    this.set("courseId", Value.fromBigInt(value));
  }

  get challengeReward(): BigInt {
    let value = this.get("challengeReward");
    return value!.toBigInt();
  }

  set challengeReward(value: BigInt) {
    this.set("challengeReward", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get question(): string {
    let value = this.get("question");
    return value!.toString();
  }

  set question(value: string) {
    this.set("question", Value.fromString(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }
}

export class Claimed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Claimed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Claimed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Claimed", id.toString(), this);
    }
  }

  static load(id: string): Claimed | null {
    return changetype<Claimed | null>(store.get("Claimed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get challengeId(): BigInt {
    let value = this.get("challengeId");
    return value!.toBigInt();
  }

  set challengeId(value: BigInt) {
    this.set("challengeId", Value.fromBigInt(value));
  }

  get courseId(): BigInt {
    let value = this.get("courseId");
    return value!.toBigInt();
  }

  set courseId(value: BigInt) {
    this.set("courseId", Value.fromBigInt(value));
  }

  get studentAddress(): Bytes {
    let value = this.get("studentAddress");
    return value!.toBytes();
  }

  set studentAddress(value: Bytes) {
    this.set("studentAddress", Value.fromBytes(value));
  }

  get reward(): BigInt {
    let value = this.get("reward");
    return value!.toBigInt();
  }

  set reward(value: BigInt) {
    this.set("reward", Value.fromBigInt(value));
  }
}

export class CourseAdded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CourseAdded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CourseAdded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CourseAdded", id.toString(), this);
    }
  }

  static load(id: string): CourseAdded | null {
    return changetype<CourseAdded | null>(store.get("CourseAdded", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get courseOwner(): Bytes {
    let value = this.get("courseOwner");
    return value!.toBytes();
  }

  set courseOwner(value: Bytes) {
    this.set("courseOwner", Value.fromBytes(value));
  }

  get totalStaked(): BigInt {
    let value = this.get("totalStaked");
    return value!.toBigInt();
  }

  set totalStaked(value: BigInt) {
    this.set("totalStaked", Value.fromBigInt(value));
  }

  get stakedTokenAddress(): Bytes {
    let value = this.get("stakedTokenAddress");
    return value!.toBytes();
  }

  set stakedTokenAddress(value: Bytes) {
    this.set("stakedTokenAddress", Value.fromBytes(value));
  }

  get courseId(): BigInt {
    let value = this.get("courseId");
    return value!.toBigInt();
  }

  set courseId(value: BigInt) {
    this.set("courseId", Value.fromBigInt(value));
  }
}

export class StudentAdded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StudentAdded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StudentAdded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StudentAdded", id.toString(), this);
    }
  }

  static load(id: string): StudentAdded | null {
    return changetype<StudentAdded | null>(store.get("StudentAdded", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get courseId(): BigInt {
    let value = this.get("courseId");
    return value!.toBigInt();
  }

  set courseId(value: BigInt) {
    this.set("courseId", Value.fromBigInt(value));
  }

  get studentAddress(): Bytes {
    let value = this.get("studentAddress");
    return value!.toBytes();
  }

  set studentAddress(value: Bytes) {
    this.set("studentAddress", Value.fromBytes(value));
  }
}

export class SubmittedChallenge extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubmittedChallenge entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubmittedChallenge must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubmittedChallenge", id.toString(), this);
    }
  }

  static load(id: string): SubmittedChallenge | null {
    return changetype<SubmittedChallenge | null>(
      store.get("SubmittedChallenge", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get courseId(): BigInt {
    let value = this.get("courseId");
    return value!.toBigInt();
  }

  set courseId(value: BigInt) {
    this.set("courseId", Value.fromBigInt(value));
  }

  get challengeId(): BigInt {
    let value = this.get("challengeId");
    return value!.toBigInt();
  }

  set challengeId(value: BigInt) {
    this.set("challengeId", Value.fromBigInt(value));
  }

  get answer(): string {
    let value = this.get("answer");
    return value!.toString();
  }

  set answer(value: string) {
    this.set("answer", Value.fromString(value));
  }

  get studentAddress(): Bytes {
    let value = this.get("studentAddress");
    return value!.toBytes();
  }

  set studentAddress(value: Bytes) {
    this.set("studentAddress", Value.fromBytes(value));
  }
}

export class ValidatedSubmit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ValidatedSubmit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ValidatedSubmit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ValidatedSubmit", id.toString(), this);
    }
  }

  static load(id: string): ValidatedSubmit | null {
    return changetype<ValidatedSubmit | null>(store.get("ValidatedSubmit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get challengeId(): BigInt {
    let value = this.get("challengeId");
    return value!.toBigInt();
  }

  set challengeId(value: BigInt) {
    this.set("challengeId", Value.fromBigInt(value));
  }

  get courseId(): BigInt {
    let value = this.get("courseId");
    return value!.toBigInt();
  }

  set courseId(value: BigInt) {
    this.set("courseId", Value.fromBigInt(value));
  }

  get score(): BigInt {
    let value = this.get("score");
    return value!.toBigInt();
  }

  set score(value: BigInt) {
    this.set("score", Value.fromBigInt(value));
  }

  get rewardAmount(): BigInt {
    let value = this.get("rewardAmount");
    return value!.toBigInt();
  }

  set rewardAmount(value: BigInt) {
    this.set("rewardAmount", Value.fromBigInt(value));
  }

  get studentAddress(): Bytes {
    let value = this.get("studentAddress");
    return value!.toBytes();
  }

  set studentAddress(value: Bytes) {
    this.set("studentAddress", Value.fromBytes(value));
  }
}
